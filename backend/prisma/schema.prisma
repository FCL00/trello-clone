// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TableStatuses {
  active
  not_active
  pending
  approve
}

enum Status {
  ongoing
  completed
  cancelled
  archive
}

enum LogTypes {
  create
  update
  delete
  viewed
}

enum Role {
  OWNER 
  ADMIN 
  MEMBER 
  OBSERVER
  USER
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  name              String?
  password          String
  role              Role
  refreshTokens     RefreshToken[]
  task              Task[]
  comments          Comments[]             
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique // weâ€™ll hash this in real-world apps
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Task{
  id                String            @id @default(cuid())
  userId            String            
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String 
  position          Float             @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  startDate         DateTime?
  endDate           DateTime?
  status            Status            @default(ongoing)
  checklistItem     CheckListItem []
}
model CheckListItem {
  id            String              @id @default(cuid())
  taskId        String
  task          Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title         String              
  description   String              
  status        Status              @default(ongoing)
  position      Float               @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  startDate     DateTime?
  endDate       DateTime? 
  comments      Comments[]
}

model Comments {
  id              String          @id @default(cuid())
  checklistItemId String?
  checklistItem   CheckListItem?  @relation(fields: [checklistItemId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment         String
  createdAt       DateTime        @default(now())
}
